---
title: DCCP Extensions for Multipath Operation with Multiple Addresses
abbrev: Multipath DCCP
docname: draft-ietf-tsvwg-multipath-dccp-04
date: 2022-03-07
cat: exp

ipr: trust200902

area: transport
wg: Transport Area Working Group
keyword: Internet-Draft
submissiontype: IETF

coding: us-ascii
stand_alone: true

pi: [toc, sortrefs, symrefs]

author:
 -
  ins: M. Amend
  name: Markus Amend
  org: Deutsche Telekom
  abbrev: DT
  street: Deutsche-Telekom-Allee 9
  city: Darmstadt
  code: 64295
  country: Germany
  email: Markus.Amend@telekom.de
  role: editor
 -
  ins: A. Brunstrom
  name: Anna Brunstrom
  org: Karlstad University
  street: Universitetsgatan 2
  city: Karlstad
  code: 651 88
  country: Sweden
  email: anna.brunstrom@kau.se
 -
  ins: A. Kassler
  name: Andreas Kassler
  org: Karlstad University
  street: Universitetsgatan 2
  city: Karlstad
  code: 651 88
  country: Sweden
  email: andreas.kassler@kau.se
 -
  ins: V. Rakocevic
  name: Veselin Rakocevic
  org: City University of London
  street: Northampton Square
  city: London
  country: United Kingdom
  email: veselin.rakocevic.1@city.ac.uk
 -
  ins: S. Johnson
  name: Stephen Johnson
  org: BT
  street: Adastral Park
  city: Martlesham Heath
  code: IP5 3RE
  country: United Kingdom
  email: stephen.h.johnson@bt.com
  
informative:
  I-D.amend-tsvwg-multipath-framework-mpdccp:
  I-D.lhwxz-hybrid-access-network-architecture:
  I-D.muley-network-based-bonding-hybrid-access:
  I-D.amend-tsvwg-dccp-udp-header-conversion:
  I-D.amend-iccrg-multipath-reordering:
  RFC0793:
  RFC2104:
  RFC2119:
  RFC3124:
  RFC3711:
  RFC4043:
  RFC4086:
  RFC4340:
  RFC5595:
  RFC5596:
  RFC5597:
  RFC5634:
  RFC6234:
  RFC6356:
  RFC6773:
  RFC6824:
  RFC6904:
  RFC6951:
  RFC8684:
  TS23.501:
    title: System architecture for the 5G System; Stage 2; Release 16
    author:
      org: 3GPP
    date: '2020-12-17'
    target: https://www.3gpp.org/ftp//Specs/archive/23_series/23.501/23501-g70.zip
  website: 
    title: Multipath extension for DCCP
    target: https://multipath-dccp.org/
  paper:
    title: A Framework for Multiaccess Support for Unreliable Internet Traffic using Multipath DCCP
    author:
      -
         ins: M. Amend
         name: Markus Amend
      -
         ins: E. Bogenfeld
         name: Eckard Bogenfeld
      -
         ins: M. Cvjetkovic
         name: Milan Cvjetkovic
      -
         ins: V. Rakocevic
         name: Veselin Rakocevic
      -
         ins: M. Pieska
         name: Marcus Pieska
      -
         ins: A. Kassler
         name: Andreas Kassler
      -
         ins: A. Brunstrom
         name: Anna Brunstrom
    date: '2019-10-14'
    seriesinfo:
      DOI: 10.1109/LCN44214.2019.8990746
  slide:
    title: MP-DCCP for enabling transfer of UDP/IP traffic over multiple data paths in multi-connectivity networks
    author:
      -
         ins: M. Amend
         name: Markus Amend
    seriesinfo: IETF105
    target: https://datatracker.ietf.org/meeting/105/materials/slides-105-tsvwg-sessa-62-dccp-extensions-for-multipath-operation-00

  OLIA:
    title: "MPTCP is not pareto-optimal: performance issues and
a possible solution"
    date: "2012"
    seriesinfo: "Proceedings of the 8th international conference on
Emerging networking experiments and technologies, ACM"
    author:
    -
      ins: R. Khalili
    -
      ins: N. Gast
    -
      ins: M. Popovic
    -
      ins: U. Upadhyay
    -
      ins: J.-Y. Le Boudec
    
--- abstract


DCCP communication is currently restricted to a single path per
connection, yet multiple paths often exist between peers.  The
simultaneous use of these multiple paths for a DCCP session could
improve resource usage within the network and, thus, improve user
experience through higher throughput and improved resilience to
network failures.
Use cases for a Multipath DCCP (MP-DCCP) are mobile devices (handsets, vehicles) and residential home gateways simultaneously connected to distinct paths as, e.g., 
a cellular link and a WiFi link
or to a mobile radio station and a fixed access network.  Compared to existing multipath protocols such as MPTCP, MP-DCCP provides specific support for non-TCP user
traffic as UDP or plain IP.  More details on potential use cases are provided in {{website}}, {{slide}}, and {{paper}}.
All these use cases profit from an Open Source Linux reference implementation provided under {{website}}.

This document presents a set of extensions to
traditional DCCP to support multipath operation.  Multipath DCCP provides 
the ability to simultaneously use multiple
paths between peers.  The protocol offers
the same type of service to applications as DCCP and it provides the
components necessary to establish and use multiple DCCP flows across
potentially disjoint paths.

--- middle

# Introduction {#intro}

Multipath DCCP (MP-DCCP) is a set of extensions to regular DCCP
{{RFC4340}}, i.e., the Datagram Congestion Control Protocol denoting a
transport protocol that provides bidirectional unicast connections of
congestion-controlled unreliable datagrams. A multipath extension to 
DCCP enables the transport of user data  across multiple paths 
simultaneously. This is beneficial to applications that transfer fairly 
large amounts of data, due to the possibility to aggregate capacity of the 
multiple paths. In addition, it enables to tradeoff timeliness and reliability, 
which is important for low latency applications that do not require 
guaranteed delivery services such as Audio/Video streaming.
DCCP multipath operation is suggested
in the context of ongoing 3GPP work on 5G multi-access solutions
{{I-D.amend-tsvwg-multipath-framework-mpdccp}} and for hybrid access
networks {{I-D.lhwxz-hybrid-access-network-architecture}}{{I-D.muley-network-based-bonding-hybrid-access}}.
It can be applied for load-balancing, seamless session handover, and
aggregation purposes (referred to as ATSSS; Access steering, switching, and splitting
in 3GPP terminology {{TS23.501}}).

This document presents the protocol changes required to add multipath
capability to DCCP; specifically, those for signaling and setting up
multiple paths ("subflows"), managing these subflows, reordering of
data, and termination of sessions.
DCCP, as stated in {{RFC4340}} does not provide reliable and ordered
delivery. Consequently, multiple application subflows may be multiplexed over a
single DCCP connection with no inherent performance penalty 
for flows that do not require in-ordered delivery. DCCP
does not provide built-in support for those multiple application subflows.

In the following, use of the term subflow will refer to physical
separate DCCP subflows transmitted via different paths, but not to
application subflows. Application subflows are differing content-wise
by source and destination port per application as, for example, enabled
by Service Codes introduced to DCCP in {{RFC5595}}, and those subflows
can be multiplexed over a single DCCP connection. For sake of consistency
we assume that only a single application is served by a DCCP connection
here as shown in {{ref-comparison-of-standard-dccp-and-mp-dccp-protocol-stacks}}
while use of that feature should not impact DCCP operation on each single path
as noted in ({{RFC5595}}, sect. 2.4).

## Multipath DCCP in the Networking Stack {#mpdccp_network_stack}

MP-DCCP operates at the transport layer and aims to be transparent to
both higher and lower layers.  It is a set of additional features on
top of standard DCCP; {{ref-comparison-of-standard-dccp-and-mp-dccp-protocol-stacks}} illustrates this layering.  MP-DCCP is
designed to be used by applications in the same way as DCCP with no
changes to the application itself.


~~~~
                             +-------------------------------+
                             |           Application         |
+---------------+            +-------------------------------+
|  Application  |            |            MP-DCCP            |
+---------------+            + - - - - - - - + - - - - - - - +
|      DCCP     |            |Subflow (DCCP) |Subflow (DCCP) |
+---------------+            +-------------------------------+
|      IP       |            |       IP      |      IP       |
+---------------+            +-------------------------------+
~~~~
{: #ref-comparison-of-standard-dccp-and-mp-dccp-protocol-stacks title='Comparison of Standard DCCP and MP-DCCP Protocol Stacks'}


## Terminology {#terminology}

Throughout this document we make use of terms that are either specific
for multipath transport or are defined in the context of MP-DCCP,
similar to {{RFC8684}}, as follows:
 
Path: A sequence of links between a sender and a receiver, defined in
this context by a 4-tuple of source and destination address/ port pairs.

Subflow: A flow of DCCP segments operating over an individual path,
which forms part of a larger MP-DCCP connection. A subflow is started
and terminated similar to a regular (single-path) DCCP connection.

(MP-DCCP) Connection: A set of one or more subflows, over which an
application can communicate between two hosts. There is a one-to-one
mapping between a connection and an application socket.

Token: A locally unique identifier given to a multipath connection by a
host. May also be referred to as a "Connection ID".

Host: An end host operating an MP-DCCP implementation, and either
initiating or accepting an MP-DCCP connection. In addition to these
terms, within framework of MP-DCCP the interpretation of, and effect on,
regular single-path DCCP semantics is discussed in {{protocol}}.


## MP-DCCP Concept {#concept}

{{ref-example-mp-dccp-usage-scenario}} provides a general overview of the MP-DCCP working mode, whose main 
characteristics are summarized within this section.


~~~~
           Host A                               Host B
------------------------             ------------------------
Address A1    Address A2             Address B1    Address B2
----------    ----------             ----------    ----------
  |             |                      |             |
  |         (DCCP flow setup)          |             |
  |----------------------------------->|             |
  |<-----------------------------------|             |
  |             |                      |             |
  |             |  (DCCP flow setup)   |             |
  |             |--------------------->|             |
  |             |<---------------------|             |
  | merge individual DCCP flows to one multipath connection
  |             |                      |             |
~~~~
{: #ref-example-mp-dccp-usage-scenario title='Example MP-DCCP Usage Scenario'}
 

   *  An MPDCCP connection begins with a 4-way handshaking procedure, between 
      2 hosts as described in {{handshaking}}. In {{ref-example-mp-dccp-usage-scenario}}
      an MPDCCP connection is established between addresses A1 and B1 on Hosts
      A and B, respectively.

   *  If extra paths are available, additional DCCP subflows are created on 
      these paths and are attached to the existing MPDCCP session, which
      continues to appear as a single connection to the applications at both
      ends. The creation of an additional DCCP subflow is illustrated between Address A2
      on Host A and Address B1 on Host B.

   *  MPDCCP identifies multiple paths by the presence of multiple
      addresses at hosts.  Combinations of these multiple addresses
      equate to the additional paths.  In the example, other potential
      paths that could be set up are A1<->B2 and A2<->B2.  Although this
      additional session is shown as being initiated from A2, it could
      equally have been initiated from B1 or B2.

   *  The discovery and setup of additional subflows will be achieved
      through a path management method; this document describes supportive measures by which a host can initiate new subflows and available addresses can be signaled between peers. The definition of a path management method is however out of scope of this document.

   *  MPDCCP adds connection-level sequence numbers and exchange of
      RTT information to enable optional reordering functionalities.

   *  Subflows are terminated as regular DCCP connections, as described
      in ({{RFC4340}} section 8.3). The MPDCCP connection is terminated by a
      connection-level DCCP-CloseReq or DCCP-Close message.


## Requirements Language

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in {{RFC2119}}.



# Operation Overview {#op_overview}

DCCP according to RFC 4340 {{RFC4340}} allows multiple application 
subflows to be multiplexed over a single DCCP connection with 
potentially same performance. However, DCCP does not provide built-in 
support for multiple subflows and the Congestion Manager (CM) 
{{RFC3124}}, as a generic multiplexing facility, can not fully support 
multiple congestion control mechanisms for multiple DCCP flows between 
same source and destination addresses.

The proposed extension of DCCP towards Multipath-DCCP (MP-DCCP) is 
described in detail in {{protocol}}.

As a high level overview on the key functionality of MP-DCCP, the data 
stream from a DCCP application is split 
by MP-DCCP operation into one or more subflows which can be 
transmitted via different also physically isolated paths.
The corresponding control information allows the receiver to optionally 
re-assemble and deliver the received data in the right order to the 
recipient application. The details of the transmission scheduling mechanism and 
optional reordering mechanism are up to the sender and receiver, respectively,
and are outside the scope of the MP-DCCP protocol.
The following sections define MP-DCCP behavior in detail.

The Multipath Capability for MP-DCCP can be negotiated with a new DCCP 
feature, as described and fully specified in {{protocol}}. Once 
negotiated, all subsequent MP-DCCP operations are signalled with a 
variable length multipath-related option, as described in {{mp_capable}}.

A Multipath DCCP connection provides a bidirectional byte-stream between 
two hosts exchanging data as in standard DCCP manner thus not requiring 
any change to the applications. However, Multipath DCCP enables the 
hosts to use different paths with different IP addresses to transport 
the packets of the MP-DCCP connection. MP-DCCP manages the request, 
set-up, authentication, prioritization, modification, and removal of
the DCCP subflows on different paths as well as exchange of performance 
parameters. The number of concurrent DCCP subflows can vary during the 
lifetime of the Multipath DCCP connection. All MP-DCCP operations are 
signaled with MP-DCCP options described in detail in {#MP_OPT}.


# MP-DCCP Protocol {#protocol}

The DCCP protocol feature list ({{RFC4340}} section 6.4) will be
enhanced by a new Multipath related feature with Feature number 10, as
shown in {{ref-feature-list}}.

|Number | Meaning                      | Rule | Rec'n Value | Initial Req'd |
|:-----:|:-----------------------------|:----:|:-----------:|:-------------:|
|   0   | Reserved                     |      |             |               |
|   1   | Congestion Control ID (CCID) |  SP  |      2      |       Y       |
|   2   | Allow Short Seqnos           |  SP  |      0      |       Y       |
|   3   | Sequence Window              |  NN  |     100     |       Y       |
|   4   | ECN Incapable                |  SP  |      0      |       N       |
|   5   | Ack Ratio                    |  NN  |      2      |       N       |
|   6   | Send Ack Vector              |  SP  |      0      |       N       |
|   7   | Send NDP Count               |  SP  |      0      |       N       |
|   8   | Minimum Checksum Coverage    |  SP  |      0      |       N       |
|   9   | Check Data Checksum          |  SP  |      0      |       N       |
|   10  | Multipath Capable            |  SP  |      0      |       N       |
| 11-127| Reserved                     |      |             |               |
|128-255| CCID-specific features       |      |             |               |
{: #ref-feature-list title='Proposed Feature Set'}

Rec'n Rule:
: The reconciliation rule used for the feature. SP means server-priority,
  NN means non-negotiable.

Initial Value:
: The initial value for the feature. Every feature has a known initial value.

Req'd:
: This column is "Y" if and only if every DCCP implementation MUST
understand the feature. If it is "N", then the feature behaves like an extension
(see Section 15), and it is safe to respond to Change options for the feature
with empty Confirm options. Of course, a CCID might require the feature; a DCCP
that implements CCID 2 MUST support Ack Ratio and Send Ack Vector, for example.

The DCCP protocol options as defined in ({{RFC4340}} section 5.8) and ({{RFC5634}} section 2.2.1) will be enhanced
by a new Multipath related variable-length option with option type 46, as
shown in {{ref-option-list}}.

| Type  | Option Length | Meaning               | DCCP-Data? |
|:-----:|:-------------:|:---------------------:|:----------:|
|   0   |       1       | Padding               |     Y      |
|   1   |       1       | Mandatory             |     N      |
|   2   |       1       | Slow Receiver         |     Y      |
| 3-31  |       1       | Reserved              |            |
|  32   |    variable   | Change L              |     N      |
|  33   |    variable   | Confirm L             |     N      |
|  34   |    variable   | Change R              |     N      |
|  35   |    variable   | Confirm R             |     N      |
|  36   |    variable   | Init Cookie           |     N      |
|  37   |      3-8      | NDP Count             |     Y      |
|  38   |    variable   | Ack Vector [Nonce 0]  |     N      |
|  39   |    variable   | Ack Vector [Nonce 1]  |     N      |
|  40   |    variable   | Data Dropped          |     N      |
|  41   |       6       | Timestamp             |     Y      |
|  42   |     6/8/10    | Timestamp Echo        |     Y      |
|  43   |      4/6      | Elapsed Time          |     N      |
|  44   |       6       | Data Checksum         |     Y      |
|  45   |       8       | Quick-Start Response  |     ?      |
|  46   |    variable   | Multipath             |     Y      |
| 47-127|    variable   | Reserved              |            |
|128-255|    variable   | CCID-specific options |     -      |
{: #ref-option-list title='Proposed Option Set'}


## Multipath Capable Feature {#mp_capable}

DCCP endpoints are multipath-disabled by default and multipath
capability can be negotiated with the Multipath Capable Feature.

Multipath Capable has feature number 10 and has length of one-byte.
The leftmost four bits are used to specify a compatible version of the
MP-DCCP implementation (0 for this specification).
The following four bits are reserved for further use.

~~~~
    0  1  2  3   4  5  6  7
   +------------------------+
   |  Version  |  Reserved  |
   +------------------------+
    '0000'->v0
    '0001'->v1
    ........
~~~~

Multipath Capable follows the server-priority reconciliation rule described
in ({{RFC4340}} section 6.3.1), which allows multiple versions to be
specified in order of priority.

The negotiation MUST be done as part of the initial handshake procedure
as described in {{handshaking}}, and no subsequent re-negotiation of
the Multipath Capable feature is allowed on the same MP connection.

Client MUST include a Change R option during the initial handshake request to
supply a list of supported protocol versions, ordered by preference.

Server MUST include a Confirm L option in the subsequent response to agree on
a version to be used chosen from the Client list, followed by its own
supported version(s) ordered by preference.

For example:

~~~~
      Client                                             Server
      ------                                             ------
      DCCP-Req + Change R(CAPABLE, 1 0)
                     ----------------------------------->

                      DCCP-Resp + Confirm L(CAPABLE, 1, 2 1 0)
            <-----------------------------------

                 * agreement on version = 1 *
~~~~

1. Client indicates support for both versions 1 and 0, with preference
for version 1

2. Server agrees on using version 1, and supply its own preference list.


If no agreement can be found, the Server MUST reply with an empty Confirm L option
with feature number 10 and no values.

Any subflow addition to an existing MP connection MUST use the same
version negotiated for the first flow.

## Multipath Option {#MP_OPT}




~~~~
            1          2          3         
 01234567 89012345 67890123 45678901 23456789
+--------+--------+--------+--------+--------+
|00101110| Length | MP_OPT | Value(s) ...
+--------+--------+--------+--------+--------+
 Type=46
~~~~

|Type | Option Length | MP_OPT           | Meaning                                              |
|:----|:--------------|:-----------------|:-----------------------------------------------------|
| 46  |       var     |  0 =MP_CONFIRM   | Confirm reception and processing of an MP_OPT option |
| 46  |       12      |  1 =MP_JOIN      | Join path to an existing MP-DCCP flow                |
| 46  |       3       |  2 =MP_FAST_CLOSE| Close MP-DCCP flow unconditionally                   |
| 46  |       var     |  3 =MP_KEY       | Exchange key material for MP_HMAC                    |
| 46  |       7       |  4 =MP_SEQ       | Multipath Sequence Number                            |
| 46  |       23      |  5 =MP_HMAC      | HMA Code for authentication                          |
| 46  |       12      |  6 =MP_RTT       | Transmit RTT values                                  |
| 46  |       var     |  7 =MP_ADDADDR   | Advertise additional Address                         |
| 46  |       var     |  8 =MP_REMOVEADDR| Remove Address                                       |
| 46  |       4       |  9 =MP_PRIO      | Change Subflow Priority                              |
| 46  |       3       | 10 =MP_CLOSE     | Close MP-DCCP flow                                   |
{: #ref-mp-option-list title='MP_OPT Option Types'}

### MP_CONFIRM {#MP_CONFIRM}


~~~~
              1          2          3           4          5
   01234567 89012345 67890123 45678901 23456789 01234567 89012345
  +--------+--------+--------+--------+--------+--------+--------+
  |00101110| Length |00000000| List of options ...
  +--------+--------+--------+--------+--------+--------+--------+
   Type=46           MP_OPT=0
~~~~

MP_CONFIRM is used to send confirmation of reception and processing of the multipath 
options that require it (see {{ref-mp-option-confirm}}). Such options will be retransmitted by the sender 
until this receives the corresponding MP_CONFIRM. The length and sending path of the MP_CONFIRM are dependent 
on the confirmed options, which will be copied verbatim and appended as list of options.



|Type | Option Length | MP_OPT           | MP_CONFIRM Sending path                                       |
|:----|:--------------|:-----------------|:--------------------------------------------------------------|
| 46  |       var     | 7 =MP_ADDADDR    | Any available                                                 |
| 46  |       var     | 8 =MP_REMOVEADDR | Any available                                                 |
| 46  |       4       | 9 =MP_PRIO       | Any available                                                 | 
{: #ref-mp-option-confirm title='Multipath options requiring confirmation'}


### MP_JOIN {#MP_JOIN}


~~~~
              1          2          3
   01234567 89012345 67890123 45678901
  +--------+--------+--------+--------+
  |00101110|00001011|00000001| Addr ID|
  +--------+--------+--------+--------+
  | Path Token                        |
  +--------+--------+--------+--------+
  | Nonce                             |
  +--------+--------+--------+--------+
   Type=46  Length=12 MP_OPT=1
~~~~

The MP_JOIN option is used to add a new path to an existing MP-DCCP
flow. The Path Token is the SHA256 hash of the derived key (d-key),
which was previously exchanged with the MP_KEY option.
MP_HMAC MUST be set when using MP_JOIN to provide authentication (See
MP_HMAC for details). Also MP_KEY MUST be set to provide key material
for authentication purposes.

The Address IDs of the subflow used in the initial DCCP Request/Response exchange of
the first subflow in the connection are implicit, and have the value
zero.  A host MUST store the mappings between Address IDs and
addresses both for itself and the remote host.  An implementation
will also need to know which local and remote Address IDs are
associated with which established subflows, for when addresses are
removed from a local or remote host. An Address ID has always to be unique
over the lifetime of a subflow and can only be re-assigned if sender and
receiver no longer have them in use.

The Nonce is a 32-bit random value locally generated for every MP_JOIN option.
Together with the Token, the Nonce value builds the basis to calculate the
HMAC used in the handshaking process as described in {{handshaking}}.

### MP_FAST_CLOSE {#MP_FAST_CLOSE}

Regular DCCP has the means of sending a Close or Reset signal to abruptly close a
connection.  With MP-DCCP, a regular Close or Reset only has the scope of the
subflow; it will only close the applicable subflow and will not
affect the remaining subflows concurrently in use on other paths.  MP-DCCP's connection will stay alive at
the data level, in order to permit break-before-make handover between
subflows.  It is therefore necessary to provide an MP-DCCP-level
"Reset" to allow the abrupt closure of the whole MP-DCCP connection;
this is done via the MP_FAST_CLOSE option.

~~~~
              1          2          3
   01234567 89012345 67890123 45678901 23456789
  +--------+--------+--------+--------+--------+
  |00101110| Length |00000010| Key Data ...
  +--------+--------+--------+--------+--------+
   Type=46           MP_OPT=2
~~~~

For being effective, the MP_FAST_CLOSE must be sent from an initiating host on all subflows as part of a DCCP-Reset packet with Reset Code 12. To protect unauthorized shutdown of a multi-path connection, the selected Key Data of the peer host during the handshaking procedure is carried by the MP_FAST_CLOSE option. With completion of this step, the initiating host can tear down the subflows and the multi-path connection immediately terminates.
Upon reception of the MP_FAST_CLOSE and validation of the Key Data at the peer host, a DCCP Reset packet is replied on all subflows to the initiating host again with Reset Code 12. The peer host can now close the whole MP-DCCP connection (it transitions directly to CLOSED state).


### MP_KEY {#MP_KEY}


~~~~
                        1                    2                    3     
   0 1 2 3 4 5 6 7  8 9 0 1 2 3 4 5  6 7 8 9 0 1 2 3  4 5 6 7 8 9 0 1
  +----------------+----------------+----------------+----------------+
  |0 0 1 0 1 1 1 0 |     Length     |0 0 0 0 0 0 1 1 |  Key Type (1)  | 
  +----------------+----------------+----------------+----------------+
  |  Key Data (1)  |  Key Type (2)  |  Key Data (2)  | ....
  +----------------+----------------+----------------+----------------+
   Type=46                           MP_OPT=3
   
~~~~

The MP_KEY suboption is used to exchange key material between
hosts. The Length varies between 12 and 68 Bytes for a single-key message, and up to
110 Bytes when all specified Key Types 0-2 are provided. The Key Type field is used to
specify the type of the following key data. Key types are shown in {{ref-key-type-list}}.

| Key  Type              | Key Length (Bytes) | Meaning                          |
|------------------------|--------------------|----------------------------------|
| 0 =Plain Text          |                  8 | Plain Text Key                   |
| 1 =ECDHE-C25519-SHA256 |                 32 | ECDHE with SHA256 and Curve25519 |
| 2 =ECDHE-C25519-SHA512 |                 64 | ECDHE with SHA512 and Curve25519 |
| 3-255                  |                    | Reserved                         |
{: #ref-key-type-list title='MP_KEY Key Types'}


Plain Text
: Key Material is exchanged in plain text between hosts, and the key
  parts (key-a, key-b) are used by each host to generate the derived
  key (d-key) by concatenating the two parts with the local key
  in front (e.g. hostA d-key(A)=(key-a+key-b), hostB d-key(B)=(key-b+key-a)).
{: vspace='0'}


ECDHE-SHA256-C25519
: Key Material is exchanged via ECDHE key exchange with SHA256 and
  Curve 25519 to generate the derived key (d-key).
{: vspace='0'}


ECDHE-SHA512-C25519
: Key Material is exchanged via ECDHE key exchange with SHA512 and
  Curve 25519 to generate the derived key (d-key).
{: vspace='0'}

Providing multiple keys is only permitted in the DCCP-Request message
of the handshake procedure for the first flow, and allows the hosts to agree
on a single key type to be used as described in {{handshaking}}

### MP_SEQ {#MP_SEQ}


~~~~
              1          2          3           4          5
   01234567 89012345 67890123 45678901 23456789 01234567 89012345
  +--------+--------+--------+--------+--------+--------+--------+
  |00101110|00000111|00000100| Multipath Sequence Number         |
  +--------+--------+--------+--------+--------+--------+--------+
   Type=46  Length=7 MP_OPT=4
~~~~

The MP_SEQ option is used for end-to-end datagram-based sequence
numbers of an MP-DCCP connection. The initial data sequence
number (IDSN) SHOULD be set randomly. The MP_SEQ number space is
different from the path individual sequence number space and MUST be
sent with any DCCP-Data and DCCP-DataACK packet.


### MP_HMAC {#MP_HMAC}


~~~~
              1          2          3           4
   01234567 89012345 67890123 45678901 23456789 01234567
  +--------+--------+--------+--------+--------+--------+
  |00101110|00001011|00000101| HMAC-SHA256 (20 bytes) ...
  +--------+--------+--------+--------+--------+--------+
   Type=46  Length=23 MP_OPT=5
~~~~

The MP_HMAC option is used to provide authentication for the MP_JOIN
option. The HMAC code is generated according to {{RFC2104}} in combination
with the SHA256 hash algorithm described in {{RFC6234}}, with the output
truncated to the leftmost 160 bits (20 bytes).

The "Key" used for the HMAC computation is the derived key (d-key)
described in {{MP_KEY}}, while the HMAC "Message" is a concatenation of
the token and nonce of the MP_JOIN for which authentication shall be performed.

### MP_RTT {#MP_RTT}


~~~~
              1          2          3           4          5
   01234567 89012345 67890123 45678901 23456789 01234567 89012345
  +--------+--------+--------+--------+--------+--------+--------+
  |00101110|00001100|00000110|RTT Type| RTT
  +--------+--------+--------+--------+--------+--------+--------+
  |        | Age                               |
  +--------+--------+--------+--------+--------+
   Type=46  Length=12 MP_OPT=6
~~~~

The MP_RTT option is used to transmit RTT values in milliseconds and
MUST belong to the path over which this information is transmitted.
Additionally, the age of the measurement is specified in milliseconds.

The RTT and Age information is a 32-bit integer, which allows to cover a period of
approximately 1193 hours.

Raw RTT (=0)
: Raw RTT value of the last Datagram Round-Trip. The Age
  parameter MUST be set to 0.
{: vspace='0'}


Min RTT (=1)
: Min RTT value. The period for computing the Minimum can be specified
  by the Age parameter.
{: vspace='0'}


Max RTT (=2)
: Max RTT value. The period for computing the Maximum can be specified
  by the Age parameter.
{: vspace='0'}


Smooth RTT (=3)
: Averaged RTT value. The period for computing the smoothed RTT can be specified
  by the Age parameter.
{: vspace='0'}

Age
: The Age parameter is set to a time and  
  contains the periods for computing of derived  
  RTT values for the Minimum (=1), Maximum (=2)
  as well as for the averaged smoothed RTT value (=3). An Age
  parameter of zero MUST NOT be interpreted by the receiver.
{: vspace='0'}


### MP_ADDADDR {#MP_ADDADDR}

The MP_ADDADDR option announces additional addresses (and, optionally,
ports) on which a host can be reached. This option can be used at any
time during an existing DCCP connection, when the sender wishes to
enable multiple paths and/or when additional paths become available.
Length is variable depending on IPv4 or IPv6 and whether port number is
used and is in range between 28 and 42 bytes.

~~~~
                      1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +---------------+---------------+-------+-------+---------------+
  |     Type      |     Length    |Subtype| IPVer |  Address ID   |
  +---------------+---------------+-------+-------+---------------+
  |          Address (IPv4 - 4 bytes / IPv6 - 16 bytes)           |
  +-------------------------------+-------------------------------+
  |   Port (2 bytes, optional)    |                               |
  +-------------------------------+                               |
  |                       HMAC (20 bytes)                         |
  |                                                               |
  |                                                               |
  |                                                               |
  |                                                               |
  |                               +-------------------------------+
  |                               |
  +-------------------------------+
~~~~
 
Every address has an Address ID that can be used for uniquely
identifying the address within a connection for address removal. The
Address ID is also used to identify MP_JOIN options (see {{MP_JOIN}})
relating to the same address, even when address translators are in use.
The Address ID MUST uniquely identify the address for the sender of the
option (within the scope of the connection); the mechanism for
allocating such IDs is implementation specific.

All Address IDs learned via either MP_JOIN or ADD_ADDR SHOULD be stored
by the receiver in a data structure that gathers all the
Address-ID-to-address mappings for a connection (identified by a token
pair). In this way, there is a stored mapping between the Address ID,
observed source address, and token pair for future processing of control
information for a connection.
  
Ideally, ADD_ADDR and REMOVE_ADDR options would be sent reliably, and in
order, to the other end. This would ensure that this address management
does not unnecessarily cause an outage in the connection when remove/add
addresses are processed in reverse order, and also to ensure that all
possible paths are used. Note, however, that losing reliability and
ordering will not break the multipath connections, it will just reduce
the opportunity to open new paths and to survive different
patterns of path failures.

Therefore, implementing reliability signals for these DCCP options is
not necessary.  In order to minimize the impact of the loss of these
options, however, it is RECOMMENDED that a sender should send these
options on all available subflows.  If these options need to be received
in-order, an implementation SHOULD only send one ADD_ADDR/REMOVE_ADDR
option per RTT, to minimize the risk of misordering. A host that
receives an ADD_ADDR but finds a connection set up to that IP address
and port number is unsuccessful SHOULD NOT perform further connection
attempts to this address/port combination for this connection. A sender
that wants to trigger a new incoming connection attempt on a previously
advertised address/port combination can therefore refresh ADD_ADDR
information by sending the option again.

[TBD/TBV]


### MP_REMOVEADDR {#MP_REMOVEADDR}

If, during the lifetime of an MP-DCCP connection, a previously announced
address becomes invalid (e.g., if the interface disappears), the
affected host SHOULD announce this so that the peer can remove subflows
related to this address.

This is achieved through the Remove Address (REMOVE_ADDR) option which
will remove a previously added address (or list of addresses) from a
connection and terminate any subflows currently using that address.

For security purposes, if a host receives a REMOVE_ADDR option, it must
ensure the affected path(s) are no longer in use before it instigates
closure. Typical DCCP validity tests on the subflow (e.g., packet type
specific sequence and acknowledgement number check) MUST also be
undertaken. An implementation can use indications of these test failures
as part of intrusion detection or error logging.

The sending and receipt of this message SHOULD trigger the sending of
DCCP-Close and DCCP-Reset by client and server, respectively on the
affected subflow(s) (if possible), as a courtesy to cleaning up
middlebox state, before cleaning up any local state.

Address removal is undertaken by ID, so as to permit the use of NATs and
other middleboxes that rewrite source addresses.  If there is no address
at the requested ID, the receiver will silently ignore the request.

~~~~
                     1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+-------+-------+---------------+
|     Type      |  Length = 3+n |Subtype|(resvd)|   Address ID  |...
+---------------+---------------+-------+-------+---------------+
                          (followed by n-1 Address IDs, if required)
~~~~
 
Minimum length of this option is 4 bytes (for one address to remove).

[TBD/TBV]


### MP_PRIO {#MP_PRIO}

In the event that a single specific path out of the set of available
paths shall be treated with higher priority compared to the others, a
host may wish to signal such change in priority  to the peer.
One reason for such behavior is due to the different costs involved in
using different paths (e.g., WiFi is free while cellular has limit on
volume, 5G has higher energy consumption). Also, the priority of a path
may be subject to dynamic changes, for example when the mobile runs out
of battery only a single path may be preferred. Therefore, the path
priority should be considered as hints for the packet scheduler when
making decisions which path to use for user plane traffic.


The MP_PRIO option, shown below, can be used to set a priority flag
for the path which is specified by the AddrID field that uniquely
identifies the path. The option can be sent over any path.

~~~~
                        1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +---------------+---------------+-------+-------+--------------+
   |     Type      |     Length    |Subtype| Prio  | AddrID       |
   +---------------+---------------+-------+-------+--------------+
~~~~

The following values are available for Prio field:

*   0: Do not use. The path is not available.
*   1: Standby: do not use this path for traffic scheduling, if another
       path (secondary or primary) is available.
*   2: Secondary: do not use this path for traffic scheduling, if the other
       paths are good enough. The path will be used occasionally, e.g. when
       primary paths are congested or become not available.
*   3: Primary: can use the path in any way deemed reasonable by peer. Will
       always be used for packet scheduling decisions.
*   4 - 15: relative priority of one path over the other to give relative
       path priority for primary paths. The peer should consider sending 
       more traffic over higher priority path. Higher numbers indicate 
       higher priority.

Example use cases include:
1) Setting Wi-Fi path to Primary and Cellular paths to Secondary. In this case
   Wi-Fi will be used and Cellular only if the Wi-Fi path is congested or not
   available. Such setting results in using the Cellular path only temporally, 
   if more capacity is needed than the WiFi path can provide, indicating a 
   clear priority of the Wi-Fi path over the Cellular due to e.g. cost reasons.

2) Setting Wi-Fi path to Primary and Cellular to Standby. In this case Wi-Fi
   will be used and Cellular only, if the Wi-Fi path is not available. 
3) Setting Wi-Fi path to Primary and Cellular path to Primary. In this case,
   all packets can be scheduled  over all paths at all time. 

The default behavior is, that a path can always be used for packet scheduling 
decisions (MP_PRIO=3), if the path has been established and added to an 
existing MP-DCCP connection. At least one path should have a MP_PRIO value
greater or equal to one for it to be allowed to send on the connection. 
MP_PRIO is assumed to be exchanged reliably using the MP_CONFIRM mechanisms 
(see {{ref-mp-option-confirm}}). 

### MP_CLOSE {#MP_CLOSE}


~~~~
              1          2          3           
   01234567 89012345 67890123 45678901 23456789 
  +--------+--------+--------+--------+--------+
  |00101110| Length |00001010| Key Data ...
  +--------+--------+--------+--------+--------+
   Type=46           MP_OPT=10
~~~~

If the MP_CLOSE is present in a DCCP-CloseReq or DCCP-Close, the MP-DCCP connection is closed using the regular procedure of single-path DCCP termination on all subflows. Only in case all subflows are successfully terminated, the overall MP-DCCP connection passes to a closed state.

Contrary to a MP_FAST_CLOSE {{MP_FAST_CLOSE}}, no single-sided abrupt termination is applied.

## MP-DCCP Handshaking Procedure {#handshaking}

~~~~
          Host A                                         Host B 
------------------------                              ----------
Address A1    Address A2                              Address B1
----------    ----------                              ----------
     |             |                                       |
     |             DCCP-Request + MP_CAPABLE               |
     |------- MP_KEY(Key-A(1), Key-A(2),...) ------------->|
     |<---------------------- MP_KEY(Key-B) ---------------|
     |             DCCP-Response +  MP_CAPABLE             |
     |             |                                       |
     |   DCCP-Ack  |                                       |
     |--------- MP_KEY(Key-A) + MP_KEY(Key-B) ------------>|
     |<----------------------------------------------------|
     |   DCCP-Ack  |                                       |
     |             |                                       |
     |             |          DCCP-Request + MP_CAPABLE    |
     |             |--- MP_JOIN(TB,RA) ------------------->|
     |             |<------MP_JOIN(TB,RB) + MP_HMAC(A)-----|
     |             |DCCP-Response  + MP_CAPABLE            |
     |             |                                       |
     |             |DCCP-Ack                               |
     |             |-------- MP_HMAC(B) ------------------>|
     |             |<--------------------------------------|
     |             |DCCP-ACK                               |
~~~~
{: #ref-mp-dccp-handshaking title='Example MP-DCCP Handshake'}

The basic initial handshake for the first flow is as follows:

* Host A sends a DCCP-Request with the MP-Capable feature Change
  request and the MP_KEY option with an Host-specific Key-A for
  each of supported types as described in {{MP_KEY}}

* Host B sends a DCCP-Response with Confirm feature for
  MP-Capable and the MP_Key option with a single Host-specific Key-B.
  The type of the key MUST be chosen from the list of supported types
  from the previous request

* Host A sends a DCCP-Ack with both Keys echoed to Host B.

* Host B sends a DCCP-Ack to confirm both keys and conclude the handshaking.

Host A MUST wait the final DCCP-Ack from host B before starting any
establishment of additional subflow connections.

The handshake for subsequent flows based on a successful initial
handshake is as follows:

* Host A sends a DCCP-Request with the MP-Capable feature Change
  request and the MP_JOIN option with Host B’s Token TB, generated from
  the derived key by applying a SHA256 hash and truncating to the first
  32 bits. Additionally, an own random nonce RA is transmitted with the
  MP_JOIN.

* Host B computes the HMAC of the DCCP-Request and sends a DCCP-Response
  with Confirm feature option for MP-Capable and the MP_JOIN option with
  the Token TB and a random nonce RB together with the computed MP_HMAC.
  The HMAC is calculated by taking the leftmost 20 bytes from the SHA256 hash
  of a HMAC code created by using token and nonce received with MP_JOIN(A) as message
  and the derived key described in {{MP_KEY}} as key:

  MP_HMAC(A) = HMAC-SHA256(Key=d-key(B), Msg=TB+RA)

* Host A sends a DCCP-Ack with the HMAC computed for the DCCP-Response.
  The HMAC is calculated by taking the leftmost 20 bytes from the SHA256 hash
  of a HMAC code created by using token and nonce received with MP_JOIN(B) as message
  and the derived key described in {{MP_KEY}} as key:

  MP_HMAC(A) = HMAC-SHA256(Key=d-key(A), Msg=TB+RB)

* Host B sends a DCCP-Ack to confirm the HMAC and to conclude the
  handshaking.

## Close a MP-DCCP connection
[tbd]

## Fallback

When a subflow fails to operate within the MP-DCCP requirements, it is 
necessary to fall back to the safe operation. This may be either falling back 
to regular DCCP, or removing a problematic subflow. The main reason for 
subflow failing is loss of MP-DCCP options. 

At the start of the MP-DCCP connection, the handshake ensures exchange of MP-DCCP
options and thus ensures that the path is fully MP-DCCP capable. If during the
handshake procedure it appears that DCCP-Request or DCCP-Response or DCCP-Ack
messages don’t have the MP-DCCP options, the MP-DCCP connection will not be 
established and the handshake should fall back to regular DCCP. The same
fallback should take place if the endpoints fail to agree on a protocol
version to use during the Multipath Capable feature negotiation.

If a subflow attempts to join an existing MP-DCCP connection, but MP-DCCP options 
are not present in the handshake messages or the protocol version doesn't
match the value negotiated for the first flow, that subflow will be closed.

## Congestion Control Considerations

Senders MUST manage per-path congestion status, and SHOULD avoid to send
more data on a given path than congestion control on that path
allows.

When a Multipath DCCP connection uses two or more paths, there is no
guarantee that these paths are fully disjoint.  When two (or more
paths) share the same bottleneck, using a standard congestion control
scheme could result in an unfair distribution of the bandwidth with
the multipath connection getting more bandwidth than competing single
path connections.  Multipath TCP uses the coupled congestion control
Linked Increases Algorithm (LIA) specified in [RFC6356] to
solve this problem.  This scheme can be adapted also for Multipath DCCP.
The same applies to other coupled congestion control schemes, which
have been proposed for Multipath TCP such as Opportunistic Linked
Increases Algorithm [OLIA].

## Maximum Packet Size Considerations

A DCCP implementation MUST maintain the maximum packet size (MPS) during operation of a DCCP session. This procedure is specified for single-path DCCP in {{RFC4340}}, Section 14. Without any restrictions, this is adopted for MP-DCCP operations, in particular the PMTU measurement and the Sender Behaviour. As per this definition a DCCP application interface SHOULD let the application discover the current MPS, this is subject to ambiguity with potential different path MPS in a multi-path system. For compatibility reasons, a MP-DCCP implementation SHOULD always announce the minimum MPS across all paths.


# Security Considerations {#security}

Similar to DCCP, MP-DCCP does not provide cryptographic security
guarantees inherently. Thus, if applications need cryptographic security
(integrity, authentication, confidentiality, access control, and
anti-replay protection) the use of IPsec or some other kind of
end-to-end security is recommended;
Secure Real-time Transport Protocol (SRTP) {{RFC3711}} is one candidate
protocol for authentication. Together with Encryption of Header
Extensions in SRTP, as provided by {{RFC6904}}, also integrity would
be provided.

As described in {{RFC4340}}, DCCP provides protection against hijacking
and limits the potential impact of some denial-of-service attacks, but
DCCP provides no inherent protection against attackers’ snooping on data
packets. Regarding the security of MP-DCCP no additional risks should be
introduced compared to regular DCCP of today. Thereof derived are the
following key security requirements to be fulfilled by MP-DCCP:

* Provide a mechanism to confirm that parties involved in a subflow
  handshake are identical to those in the original connection setup.
* Provide verification that the new address to be included in a MP
  connection is valid for a peer to receive traffic at before using it.
* Provide replay protection, i.e., ensure that a request to add/remove a
  subflow is 'fresh'. 

In order to achieve these goals, MP-DCCP includes a hash-based handshake
algorithm documented in Sections {{MP_KEY}} and {{handshaking}}. The
security of the MP-DCCP connection depends on the use of keys that are
shared once at the start of the first subflow and are never sent again
over the network. To ease demultiplexing while not giving away any
cryptographic material, future subflows use a truncated cryptographic
hash of this key as the connection identification "token". The keys are
concatenated and used as keys for creating Hash-based Message
Authentication Codes (HMACs) used on subflow setup, in order to verify
that the parties in the handshake are the same as in the original
connection setup. It also provides verification that the peer can
receive traffic at this new address. Replay attacks would still be
possible when only keys are used;
therefore, the handshakes use single-use random numbers (nonces) at both
ends -- this ensures that the HMAC will never be the same on two handshakes.
Guidance on generating random numbers suitable for use as keys is given
in {{RFC4086}}. During normal operation, regular DCCP protection
mechanisms (such as header checksum to protect DCCP headers against
corruption) will provide the same level of protection against attacks on
individual DCCP subflows as exists for regular DCCP today. 


# Interactions with Middleboxes {#middlebox}

Issues from interaction with on-path middleboxes such as NATs, firewalls, proxies,
intrusion detection systems (IDSs), and others have to be considered for all
extensions to standard protocols since otherwise unexpected reactions of
middleboxes may hinder its deployment. DCCP already provides means to
mitigate the potential impact of middleboxes, also in comparison to TCP (see
{{RFC4043}}, sect. 16). In case, however, both hosts are located behind a NAT or
firewall entity, specific measures have to be applied such as the {{RFC5596}}-specified
simultaneous-open technique that update the (traditionally asymmetric)
connection-establishment procedures for DCCP.  Further standardized technologies
addressing NAT type middleboxes are covered by {{RFC5597}}.

{{RFC6773}} specifies UDP Encapsulation for NAT Traversal of DCCP sessions,
similar to other UDP encapsulations such as for SCTP {{RFC6951}}. The alternative
U-DCCP approach proposed in {{I-D.amend-tsvwg-dccp-udp-header-conversion}} would
reduce tunneling overhead. The handshaking procedure for DCCP-UDP
header conversion or use of a DCCP-UDP negotiation procedure to signal support
for DCCP-UDP header conversion would require encapsulation during the handshakes
and use of two additional port numbers out of the UDP port number space, but
would require zero overhead afterwards.


# Implementation

The approach described above has been implemented in open source across different testbeds and a new scheduling algorithm has been extensively tested. Also 
demonstrations of a laboratory setup have been executed and have been published at {{website}}.


# Acknowledgments

Due to the great spearheading work of the Multipath TCP authors in {{RFC6824}}/{{RFC8684}}, some text
passages for the -00 version of the draft were copied almost unmodified.

The authors gratefully acknowledge significant input into this document from Dirk von Hugo and Nathalie Romo Moreno.


# IANA Considerations

This document defines one new value to DCCP feature list and one new
DCCP Option with ten corresponding Subtypes as follows. 
This document defines a new DCCP feature parameter for negotiating
the support of multipath capability for DCCP sessions between hosts
as described in Section 3. The following entry in {{ref-add-feature-list}} should be
added to the "Feature Numbers Registry" according to {{RFC4340}}, Section 19.4. under the "DCCP Protocol" heading. 

| Value | Feature Name               | Specification   |
|:-----:|:--------------------------:|:---------------:|
| 0x10  | MP-DCCP capability feature | {{mp_capable}}  |
{:#ref-add-feature-list title='Addition to DCCP Feature list Entries'}

This document defines a new DCCP protocol option of type=46 as described in Section 3.2 together with 10 additional sub-options.
The following entries in {{ref-add-proto-opt-list}} should be added to the "DCCP
Protocol options" and assigned as "MP-DCCP sub-options", respectively.
      
| Value           | Symbol          | Name                                             | Reference         |
|:---------------:|:---------------:|:------------------------------------------------:|:-----------------:|
| TBD or Type=46  | MP_OPT          | DCCP Multipath option                            | {{MP_OPT}}        |
| TBD or MP_OPT=0 | MP_CONFIRM      | Confirm reception/processing of an MP_OPT option | {{MP_CONFIRM}}    |
| TBD or MP_OPT=1 | MP_JOIN         | Join path to existing MP-DCCP flow               | {{MP_JOIN}}       |
| TBD or MP_OPT=2 | MP_FAST_CLOSE   | Close MP-DCCP flow                               | {{MP_FAST_CLOSE}} |
| TBD or MP_OPT=3 | MP_KEY          | Exchange key material for MP_HMAC                | {{MP_KEY}}        |
| TBD or MP_OPT=4 | MP_SEQ          | Multipath Sequence Number                        | {{MP_SEQ}}        |
| TBD or MP_OPT=5 | MP_HMAC         | Hash-based Message Auth. Code for MP-DCCP        | {{MP_HMAC}}       |
| TBD or MP_OPT=6 | MP_RTT          | Transmit RTT values and calculation parameters   | {{MP_RTT}}        |
| TBD or MP_OPT=7 | MP_ADDADDR      | Advertise additional Address(es)/Port(s)         | {{MP_ADDADDR}}    |
| TBD or MP_OPT=8 | MP_REMOVEADDR   | Remove Address(es)/ Port(s)                      | {{MP_REMOVEADDR}} |
| TBD or MP_OPT=9 | MP_PRIO         | Change Subflow Priority                          | {{MP_PRIO}}       |
{:#ref-add-proto-opt-list title='Addition to DCCP Protocol options and corresponding sub-options'}

According to the definition of the MP_FAST_CLOSE option in {{MP_FAST_CLOSE}}, a new Reset Code value 12 with the name "Abrupt MP termination" should be added.

[Tbd], must include options for:



* handshaking procedure to indicate MP support

* handshaking procedure to indicate JOINING of an existing MP
  connection

* signaling of new or changed addresses

* setting handover or aggregation mode

* MP-specific congestion mechanisms


should include options carrying:



* overall sequence number for restoring/re-assembly/re-ordering purposes

* sender time measurements for restoring/re-assembly/re-ordering purposes

--- back


# Differences from Multipath TCP {#diff_mptcp}

Multipath DCCP is similar to Multipath TCP {{RFC8684}}, in that it
extends the related basic DCCP transport protocol {{RFC4340}} with
multipath capabilities in the same way as Multipath TCP extends TCP
{{RFC0793}}.
However, because of the differences between the underlying TCP and DCCP
protocols, the transport characteristics of MPTCP and MP-DCCP are
different.

{{table_tcp_dccp_comp}} compares the protocol characteristics of TCP
and DCCP, which are by nature inherited by their respective multipath
extensions.  A major difference lies in the delivery of payload, which
is for TCP an exact copy of the generated byte-stream. DCCP behaves
in a different way and does not guarantee to deliver any payload nor the
order of delivery.
Since this is mainly affecting the receiving endpoint of a TCP or
DCCP communication, many similarities on the sender side can be identified.
Both transport protocols share the 3-way initiation of a
communication and both employ congestion control to adapt the sending
rate to the path characteristics.

| Feature                | TCP              | DCCP                          |
|:----------------------:|:----------------:|:-----------------------------:|
| Full-Duplex            | yes              | yes                           |
| Connection-Oriented    | yes              | yes                           |
| Header option space    | 40 bytes         | \< 1008 bytes or PMTU         |
| Data transfer          | reliable         | unreliable                    |
| Packet-loss handling   | re-transmission  | report only                   |
| Ordered data delivery  | yes              | no                            |
| Sequence numbers       | one per byte     | one per PDU                   |
| Flow control           | yes              | no                            |
| Congestion control     | yes              | yes                           |
| ECN support            | yes              | yes                           |
| Selective ACK          | yes              | depends on congestion control |
| Fix message boundaries | no               | yes                           |
| Path MTU discovery     | yes              | yes                           |
| Fragmentation          | yes              | no                            |
| SYN flood protection   | yes              | no                            |
| Half-open connections  | yes              | no                            |
{: #table_tcp_dccp_comp title='TCP and DCCP protocol comparison'}

Consequently, the multipath features, shown in
{{table_mptcp_mpdccp_comp}}, are the same, supporting volatile paths
having varying capacity and latency, session handover and path
aggregation capabilities. All of them profit by the existence of
congestion control.

| Feature                      | MPTCP                 | MP-DCCP            |
|:----------------------------:|:---------------------:|:------------------:|
| Volatile paths               | yes                   | yes                |
| Session handover             | yes                   | yes                |
| Path aggregation             | yes                   | yes                |
| Data reordering              | yes                   | optional           |
| Expandability                | limited by TCP header | flexible           |
{: #table_mptcp_mpdccp_comp title='MPTCP and MP-DCCP protocol comparison'}

Therefore, the sender logic is not much different between MP-DCCP and
MPTCP.

The receiver side for MP-DCCP has to deal with the unreliable transport 
character of DCCP. The multipath sequence numbers included in MP-DCCP (see {{MP_SEQ}}) facilitates
adding optional mechanisms for data stream packet reordering 
at the receiver.  Information from the MP_RTT multipath option ({{MP_RTT}}), 
DCCP path sequencing and the DCCP Timestamp Option provide further means 
for advanced reordering approaches, e.g., as described in {{I-D.amend-iccrg-multipath-reordering}}.
Such mechanisms do, however, not affect interoperability
and are not part of the MP-DCCP protocol.  Many 
applications that use unreliable transport protocols can also inherently deal 
with out-of-sequence data (e.g., through adaptive audio and video buffers), 
and so additional reordering support may not be necessary. The addition of optional 
reordering mechanisms are most likely to be needed when the 
different DCCP subflows are routed across paths with different latencies. 
In theory, applications using DCCP are aware that packet reordering might 
happen, since DCCP has no mechanisms to prevent it.

The receiving process for MPTCP is on the other hand a rigid
"just wait" approach, since TCP guarantees reliable delivery.



--- back
